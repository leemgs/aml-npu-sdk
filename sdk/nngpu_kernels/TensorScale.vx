__kernel void gpuTensorScale_BilinearFP32
    (
    __read_only     image2d_array_t input,
    float           scaleX,
    float           scaleY,
    __write_only    image2d_array_t output
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    float srcXFloat = x*scaleX;
    float srcYFloat = y*scaleY;
    int4 coord_in = {floor(srcXFloat), floor(srcYFloat), z, 0};
    float v = srcXFloat-coord_in.x;
    float u = srcYFloat-coord_in.y;
    float minusv = 1.0f-v;
    float minusu = 1.0f-u;
    float4 src0, src1, src2, src3, dst = {0.0};

    src0 = read_imagef(input, coord_in);
    src1 = read_imagef(input, (int4)(coord_in.x+1, coord_in.y, z, 0));
    src2 = read_imagef(input, (int4)(coord_in.x, coord_in.y+1, z, 0));
    src3 = read_imagef(input, (int4)(coord_in.x+1, coord_in.y+1, z, 0));
    dst.x = src0.x*minusv*minusu + src1.x*v*minusu + src2.x*minusv*u + src3.x*u*v;

    write_imagef(output, (int4)(x, y, z, 0), dst);
}


__kernel void gpuTensorScale_BilinearQuant8
    (
    __read_only     image2d_array_t input,
    float           scaleX,
    float           scaleY,
    float           scaleIn,
    float           scaleOut,
    int             zpIn,
    int             zpOut,
    __write_only    image2d_array_t output
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    float srcXFloat = x*scaleX;
    float srcYFloat = y*scaleY;
    int4 coord_in = {floor(srcXFloat), floor(srcYFloat), z, 0};
    float v = srcXFloat-coord_in.x;
    float u = srcYFloat-coord_in.y;
    float minusv = 1.0f-v;
    float minusu = 1.0f-u;
    uint4 src0, src1, src2, src3, dst = {0.0};
    float s0, s1, s2, s3, tmpOut;

    src0 = read_imageui(input, coord_in);
    s0 = (convert_int(src0.x-zpIn))*scaleIn;
    src1 = read_imageui(input, (int4)(coord_in.x+1, coord_in.y, z, 0));
    s1 = (convert_int(src1.x-zpIn))*scaleIn;
    src2 = read_imageui(input, (int4)(coord_in.x, coord_in.y+1, z, 0));
    s2 = (convert_int(src2.x-zpIn))*scaleIn;
    src3 = read_imageui(input, (int4)(coord_in.x+1, coord_in.y+1, z, 0));
    s3 = (convert_int(src3.x-zpIn))*scaleIn;
    tmpOut = s0*minusv*minusu + s1*v*minusu +  s2*minusv*u + s3*u*v;

    dst.x = floor(tmpOut*scaleOut + zpOut + 0.5);
    write_imageui(output, (int4)(x, y, z, 0), dst);
}
