#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits fp16ToFp32_low4;
_viv_uniform VXC_512Bits fp16ToFp32_high4;
_viv_uniform VXC_512Bits halfToVxcHalf_8;
_viv_uniform float inputScale;
_viv_uniform float outputScale;
_viv_uniform VXC_512Bits int8MulFp16ToFp16_8x1;
_viv_uniform VXC_512Bits fp16MulFp16ToFp16_8x1;

__kernel void vxcActivationSoftRelu_Int8toFp16(
    __read_only image2d_array_t   din,
    __write_only image2d_array_t  dout)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), 0, 0);
    vxc_char8 dataIn;
    vxc_short8 dataOut;
    vxc_half8 dataInToHalf;
    float4 dataInHalfToFloat0, dataInHalfToFloat1;
    half4 res0, res1;
    half scaleIn;
    VXC_ReadImage2DArray(dataIn, din, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(CONV, scaleIn, inputScale);
    VXC_DP2x8(dataInToHalf, dataIn, scaleIn, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), int8MulFp16ToFp16_8x1);
    VXC_DP4x4(dataInHalfToFloat0, dataInToHalf, dataInToHalf, VXC_MODIFIER_BIN(0, 3, 0), fp16ToFp32_low4);
    dataInHalfToFloat0 = log1p(exp(dataInHalfToFloat0));
    _viv_asm(CONV, res0, dataInHalfToFloat0);
    VXC_DP4x4(dataInHalfToFloat1, dataInToHalf, dataInToHalf, VXC_MODIFIER_BIN(0, 3, 0), fp16ToFp32_high4);
    dataInHalfToFloat1 = log1p(exp(dataInHalfToFloat1));
    _viv_asm(CONV, res1, dataInHalfToFloat1);
    VXC_DP2x8(dataInToHalf, res0, res1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), halfToVxcHalf_8);
    _viv_asm(COPY, dataOut, dataInToHalf, 16);
    VXC_WriteImage2DArray(dout, coord, dataOut, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
__kernel void vxcActivationSoftRelu_Fp16toFp16(
    __read_only image2d_array_t   din,
    __write_only image2d_array_t  dout)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), 0, 0);
    vxc_short8 dataIn;
    vxc_half8 dataInToHalf;
    float4 dataInHalfToFloat0, dataInHalfToFloat1;
    half4 res0, res1;
    VXC_ReadImage2DArray(dataIn, din, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, dataInToHalf, dataIn, 16);
    VXC_DP4x4(dataInHalfToFloat0, dataInToHalf, dataInToHalf, VXC_MODIFIER_BIN(0, 3, 0), fp16ToFp32_low4);
    dataInHalfToFloat0 = log1p(exp(dataInHalfToFloat0));
    _viv_asm(CONV, res0, dataInHalfToFloat0);
    VXC_DP4x4(dataInHalfToFloat1, dataInToHalf, dataInToHalf, VXC_MODIFIER_BIN(0, 3, 0), fp16ToFp32_high4);
    dataInHalfToFloat1 = log1p(exp(dataInHalfToFloat1));
    _viv_asm(CONV, res1, dataInHalfToFloat1);
    VXC_DP2x8(dataInToHalf, res0, res1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), halfToVxcHalf_8);
    _viv_asm(COPY, dataIn, dataInToHalf, 16);
    VXC_WriteImage2DArray(dout, coord, dataIn, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
__kernel void vxcActivationSoftRelu_Fp16toInt8(
    __read_only image2d_array_t   din,
    __write_only image2d_array_t  dout)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), 0, 0);
    vxc_char8 dataOut;
    vxc_short8 dataIn;
    vxc_half8 dataInToHalf;
    float4 dataInHalfToFloat0, dataInHalfToFloat1;
    half4 res0, res1;
    half scaleOut;
    VXC_ReadImage2DArray(dataIn, din, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, dataInToHalf, dataIn, 16);
    _viv_asm(CONV, scaleOut, outputScale);
    VXC_DP4x4(dataInHalfToFloat0, dataInToHalf, dataInToHalf, VXC_MODIFIER_BIN(0, 3, 0), fp16ToFp32_low4);
    dataInHalfToFloat0 = log1p(exp(dataInHalfToFloat0));
    _viv_asm(CONV, res0, dataInHalfToFloat0);
    VXC_DP4x4(dataInHalfToFloat1, dataInToHalf, dataInToHalf, VXC_MODIFIER_BIN(0, 3, 0), fp16ToFp32_high4);
    dataInHalfToFloat1 = log1p(exp(dataInHalfToFloat1));
    _viv_asm(CONV, res1, dataInHalfToFloat1);
    VXC_DP2x8(dataInToHalf, res0, res1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), halfToVxcHalf_8);
    VXC_DP2x8(dataOut, dataInToHalf, scaleOut, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), fp16MulFp16ToFp16_8x1);
    VXC_WriteImage2DArray(dout, coord, dataOut, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
__kernel void vxcActivationSoftRelu_Int8toInt8(
    __read_only image2d_array_t   din,
    __write_only image2d_array_t  dout)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), 0, 0);
    vxc_char8 dataIn;
    vxc_half8 dataInToHalf;
    float4 dataInHalfToFloat0, dataInHalfToFloat1;
    half4 res0, res1;
    half scaleIn, scaleOut;
    VXC_ReadImage2DArray(dataIn, din, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(CONV, scaleIn, inputScale);
    _viv_asm(CONV, scaleOut, outputScale);
    VXC_DP2x8(dataInToHalf, dataIn, scaleIn, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), int8MulFp16ToFp16_8x1);
    VXC_DP4x4(dataInHalfToFloat0, dataInToHalf, dataInToHalf, VXC_MODIFIER_BIN(0, 3, 0), fp16ToFp32_low4);
    dataInHalfToFloat0 = log1p(exp(dataInHalfToFloat0));
    _viv_asm(CONV, res0, dataInHalfToFloat0);
    VXC_DP4x4(dataInHalfToFloat1, dataInToHalf, dataInToHalf, VXC_MODIFIER_BIN(0, 3, 0), fp16ToFp32_high4);
    dataInHalfToFloat1 = log1p(exp(dataInHalfToFloat1));
    _viv_asm(CONV, res1, dataInHalfToFloat1);
    VXC_DP2x8(dataInToHalf, res0, res1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), halfToVxcHalf_8);
    VXC_DP2x8(dataIn, dataInToHalf, scaleOut, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), fp16MulFp16ToFp16_8x1);
    VXC_WriteImage2DArray(dout, coord, dataIn, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
_viv_uniform VXC_512Bits UniInt16toFloat4Lo_4x4;
_viv_uniform VXC_512Bits UniInt16toFloat4Hi_4x4;
_viv_uniform VXC_512Bits uniExtact16Bit_2x8;
_viv_uniform float scaleInt16toInt16_In;
_viv_uniform float scaleInt16toInt16_Out;
vxc_float4 softRelu_func(vxc_float4 x)
{
    x = exp2(x);
    x += 1;
    x = log2(x);
    return x;
}
__kernel void vxcActivationSoftRelu_Int16 (
    __read_only image2d_array_t   input,
    __write_only image2d_array_t  output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_short8 src0, src1, src2, src3;
    vxc_float4 vec0, vec1;
    VXC_ReadImage2DArray(src0, input,  coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src1, input,  coord, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src2, input,  coord, VXC_5BITOFFSET_XY(0, 2), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src3, input,  coord, VXC_5BITOFFSET_XY(0, 3), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    VXC_DP4x4(vec0, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = softRelu_func(vec0) * scaleInt16toInt16_Out;
    vec1 = softRelu_func(vec1) * scaleInt16toInt16_Out;
    int4 dst0, dst1;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y ++;

    VXC_DP4x4(vec0, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = softRelu_func(vec0) * scaleInt16toInt16_Out;
    vec1 = softRelu_func(vec1) * scaleInt16toInt16_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y ++;

    VXC_DP4x4(vec0, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = softRelu_func(vec0) * scaleInt16toInt16_Out;
    vec1 = softRelu_func(vec1) * scaleInt16toInt16_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y ++;

    VXC_DP4x4(vec0, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = softRelu_func(vec0) * scaleInt16toInt16_Out;
    vec1 = softRelu_func(vec1) * scaleInt16toInt16_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}
__kernel void vxcActivationSoftRelu_Int16_2D (
    __read_only image2d_array_t   input,
    __write_only image2d_array_t  output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(1), get_global_id(1));

    vxc_short8 src0, src1, src2, src3, min, max;
    vxc_float4 vec0, vec1;
    VXC_ReadImage(src0, input,  coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input,  coord.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src2, input,  coord.xy, VXC_5BITOFFSET_XY(0, 2), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src3, input,  coord.xy, VXC_5BITOFFSET_XY(0, 3), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    coord.zw += (int2)(1, 2);

    VXC_DP4x4(vec0, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = softRelu_func(vec0) * scaleInt16toInt16_Out;
    vec1 = softRelu_func(vec1) * scaleInt16toInt16_Out;
    int4 dst0, dst1;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage(output, coord.xy, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y += 3;

    VXC_DP4x4(vec0, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = softRelu_func(vec0) * scaleInt16toInt16_Out;
    vec1 = softRelu_func(vec1) * scaleInt16toInt16_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage(output, coord.xz, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));

    VXC_DP4x4(vec0, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = softRelu_func(vec0) * scaleInt16toInt16_Out;
    vec1 = softRelu_func(vec1) * scaleInt16toInt16_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage(output, coord.xw, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));

    VXC_DP4x4(vec0, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = softRelu_func(vec0) * scaleInt16toInt16_Out;
    vec1 = softRelu_func(vec1) * scaleInt16toInt16_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage(output, coord.xy, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}
