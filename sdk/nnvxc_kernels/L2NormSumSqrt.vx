#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform int L2NorS_depth;
_viv_uniform VXC_512Bits UniFp16MulLo_dp4x4;
_viv_uniform VXC_512Bits UniFp16MulHi_dp4x4;
_viv_uniform VXC_512Bits PackLo16bitF32toF16_dp2x8;
__kernel void vxcL2NormScale_SumRsqrt
    (
    image2d_array_t input,
    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0);
    vxc_short8 img1_s16, img2_s16;
    vxc_float4 squr, sum_lo = 0, sum_hi = 0;
    vxc_half8 img1_fp16, img2_fp16;
    half4 val1_h, val2_h;
    for(int i = 0; i < L2NorS_depth; i += 2)
    {
        VXC_ReadImage(img1_s16, input, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage(img2_s16, input, coord.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        coord.y += 2;
        _viv_asm(COPY, img1_fp16, img1_s16, 16);
        _viv_asm(COPY, img2_fp16, img2_s16, 16);
        _viv_asm(COPY, img1_fp16, img1_s16, 16);
        _viv_asm(COPY, img2_fp16, img2_s16, 16);

        VXC_DP4x4(squr, img1_fp16, img1_fp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 1), UniFp16MulLo_dp4x4);
        sum_lo += squr;
        VXC_DP4x4(squr, img2_fp16, img2_fp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 1), UniFp16MulLo_dp4x4);
        sum_lo += squr;
        VXC_DP4x4(squr, img1_fp16, img1_fp16, VXC_MODIFIER(0, 3, 4, VXC_RM_TowardZero, 1), UniFp16MulHi_dp4x4);
        sum_hi += squr;
        VXC_DP4x4(squr, img2_fp16, img2_fp16, VXC_MODIFIER(0, 3, 4, VXC_RM_TowardZero, 1), UniFp16MulHi_dp4x4);
        sum_hi += squr;
    }
    sum_lo = rsqrt(sum_lo);
    sum_hi = rsqrt(sum_hi);
    write_imagef(output, coord.zwww, sum_lo);
    coord.z += 4;
    write_imagef(output, coord.zwww, sum_hi);
}
//int8 version
_viv_uniform float r_inputScale;
_viv_uniform VXC_512Bits uniIntegerSquareLo_4x4;
_viv_uniform VXC_512Bits uniIntegerSquareHi_4x4;
_viv_uniform VXC_512Bits uniDataSquareAddU32Lo_4x4;
_viv_uniform VXC_512Bits uniDataSquareAddU32Hi_4x4;
__kernel void vxcL2NormScale_SumRsqrt_int8
    (
    image2d_array_t input,
    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0);
    vxc_char8 src0, src1;
    vxc_uint4 dst0 = 0, dst1 = 0;
    for(int i = 0; i < L2NorS_depth; i += 2)
    {
        VXC_ReadImage(src0, input, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage(src1, input, coord.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        coord.y += 2;
        VXC_DP4x4(dst0, src0, dst0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDataSquareAddU32Lo_4x4);
        VXC_DP4x4(dst1, src0, dst1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDataSquareAddU32Hi_4x4);
        VXC_DP4x4(dst0, src1, dst0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDataSquareAddU32Lo_4x4);
        VXC_DP4x4(dst1, src1, dst1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDataSquareAddU32Hi_4x4);
    }
    vxc_float4 sum_lo, sum_hi;
    sum_lo = convert_float4(dst0);
    sum_hi = convert_float4(dst1);
    sum_lo = rsqrt(sum_lo) * r_inputScale;
    sum_hi = rsqrt(sum_hi) * r_inputScale;
    write_imagef(output, coord.zwww, sum_lo);
    coord.z += 4;
    write_imagef(output, coord.zwww, sum_hi);
}
__kernel void vxcL2NormScale_SumRsqrt_int16
    (
    image2d_array_t input,
    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0);
    vxc_short8 src0, src1;
    vxc_float4 squr, sum_lo = 0, sum_hi = 0;
    for(int i = 0; i < L2NorS_depth; i += 2)
    {
        VXC_ReadImage(src0, input, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage(src1, input, coord.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        coord.y += 2;
        VXC_DP4x4(squr, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniIntegerSquareLo_4x4);
        sum_lo = squr + sum_lo;
        VXC_DP4x4(squr, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniIntegerSquareHi_4x4);
        sum_hi = squr + sum_hi;
        VXC_DP4x4(squr, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniIntegerSquareLo_4x4);
        sum_lo = squr + sum_lo;
        VXC_DP4x4(squr, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniIntegerSquareHi_4x4);
        sum_hi = squr + sum_hi;
    }
    sum_lo = rsqrt(sum_lo) * r_inputScale;
    sum_hi = rsqrt(sum_hi) * r_inputScale;
    write_imagef(output, coord.zwww, sum_lo);
    coord.z += 4;
    write_imagef(output, coord.zwww, sum_hi);
}
_viv_uniform VXC_512Bits uniUInt8SquareLo_4x4;
_viv_uniform VXC_512Bits uniUInt8SquareHi_4x4;
_viv_uniform int inputZP;
__kernel void vxcL2NormScale_SumRsqrt_uint8
    (
    image2d_array_t input,
    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0);
    vxc_uchar8 src0, src1;
    vxc_float4 squr, sum_lo = 0, sum_hi = 0;
    for(int i = 0; i < L2NorS_depth; i += 2)
    {
        vxc_uchar8 zero;
        VXC_ReadImage(src0, input, coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage(src1, input, coord.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        coord.y += 2;
        _viv_asm(COPY, zero, inputZP, 4);
        VXC_DP4x4(squr, src0, zero, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniUInt8SquareLo_4x4);
        sum_lo = squr + sum_lo;
        VXC_DP4x4(squr, src0, zero, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniUInt8SquareHi_4x4);
        sum_hi = squr + sum_hi;
        VXC_DP4x4(squr, src1, zero, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniUInt8SquareLo_4x4);
        sum_lo = squr + sum_lo;
        VXC_DP4x4(squr, src1, zero, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniUInt8SquareHi_4x4);
        sum_hi = squr + sum_hi;
    }
    sum_lo = rsqrt(sum_lo) * r_inputScale;
    sum_hi = rsqrt(sum_hi) * r_inputScale;
    write_imagef(output, coord.zwww, sum_lo);
    coord.z += 4;
    write_imagef(output, coord.zwww, sum_hi);
}
