#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform float tmpScale;
_viv_uniform float tmpZP;
_viv_uniform float output_ratio;

__kernel void vxcBatch2Space_u8_u8_general
    (
    image2d_array_t input,
    image2d_array_t stride,
    image2d_array_t output,
    int input_depth
    )
{
    int4 coord_para = (int4)(0, 0, 0, 0);
    int4 strides = read_imagei(stride, coord_para);

    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);

    int4 coord = (int4)(gidx, gidy, gidz, 0);

    uchar imageData;
    VXC_ReadImage2DArray(imageData, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));

    ushort sidz = (ushort)gidz;
    ushort in_depth_s = (ushort)input_depth;
    ushort in_batch = sidz / in_depth_s;
    ushort in_depth = sidz % in_depth_s;
    ushort blockX = (ushort)strides.x;
    ushort blockY = (ushort)strides.y;

    int tmpx = in_batch % blockX;
    int tmpy = in_batch / blockY;
    int tmpBatch = in_batch;
    int tmpDepth = in_depth;

    //int out_batch = tmpBatch / (output_width * output_height);
    int out_batch = floor(tmpBatch * output_ratio);
    int out_z = out_batch * input_depth + tmpDepth;
    int4 coord_out = (int4)(gidx * strides.x + tmpx , (gidy * strides.y + tmpy), out_z, 0);

    float tmpVal0 = imageData * tmpScale + tmpZP;
    int tmpOut0 = convert_int_sat_rte(tmpVal0);
    imageData = convert_uchar(tmpOut0);

    VXC_WriteImage2DArray(output, coord_out, imageData, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}

__kernel void vxcBatch2Space_u8_u8_general_noFl
    (
    image2d_array_t input,
    image2d_array_t stride,
    image2d_array_t output,
    int input_depth
    )
{
    int4 coord_para = (int4)(0, 0, 0, 0);
    int4 strides = read_imagei(stride, coord_para);

    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);

    int4 coord = (int4)(gidx, gidy, gidz, 0);

    uchar imageData;
    VXC_ReadImage2DArray(imageData, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));

    ushort sidz = (ushort)gidz;
    ushort in_depth_s = (ushort)input_depth;
    ushort in_batch = sidz / in_depth_s;
    ushort in_depth = sidz % in_depth_s;
    ushort blockX = (ushort)strides.x;
    ushort blockY = (ushort)strides.y;

    int tmpx = in_batch % blockX;
    int tmpy = in_batch / blockY;
    int tmpBatch = in_batch;
    int tmpDepth = in_depth;

    //int out_batch = tmpBatch / (output_width * output_height);
    int out_batch = floor(tmpBatch * output_ratio);
    int out_z = out_batch * input_depth + tmpDepth;
    int4 coord_out = (int4)(gidx * strides.x + tmpx , (gidy * strides.y + tmpy), out_z, 0);
    VXC_WriteImage2DArray(output, coord_out, imageData, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}

__kernel void vxcBatch2Space_fp16_fp16_general
    (
    image2d_array_t input,
    image2d_array_t stride,
    image2d_array_t output,
    int input_depth
    )
{
    int4 coord_para = (int4)(0, 0, 0, 0);
    int4 strides = read_imagei(stride, coord_para);

    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);

    int4 coord = (int4)(gidx, gidy, gidz, 0);

    short imageData;
    VXC_ReadImage2DArray(imageData, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));

    ushort sidz = (ushort)gidz;
    ushort in_depth_s = (ushort)input_depth;
    ushort in_batch = sidz / in_depth_s;
    ushort in_depth = sidz % in_depth_s;
    ushort blockX = (ushort)strides.x;
    ushort blockY = (ushort)strides.y;

    int tmpx = in_batch % blockX;
    int tmpy = in_batch / blockY;
    int tmpBatch = in_batch;
    int tmpDepth = in_depth;

    //int out_batch = tmpBatch / (output_width * output_height);
    int out_batch = floor(tmpBatch * output_ratio);
    int out_z = out_batch * input_depth + tmpDepth;
    int4 coord_out = (int4)(gidx * strides.x + tmpx , (gidy * strides.y + tmpy), out_z, 0);

    VXC_WriteImage2DArray(output, coord_out, imageData, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}