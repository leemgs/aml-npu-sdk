__kernel void gpuEmbeddingLUT_fp32(__read_only image2d_array_t   lut,
                                   __read_only image2d_array_t   value,
                                   __write_only image2d_array_t  output)
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord_id = (int4)(z, 0, 0, 0);
    int4 coord = (int4)(x, y, 0, 0);
    int4 coord_out = (int4)(x, y, z, 0);
    int4 index = read_imagei(lut, coord_id);
    float4 tmpOut = {0.0};
    int depth = get_image_array_size(value);

    coord.z = index.s0;
    if(coord.z >= 0 && coord.z < depth)
    {
        tmpOut = read_imagef(value, coord);
        write_imagef(output, coord_out, tmpOut);
    }
}

__kernel void gpuEmbeddingLUT_quant8(__read_only image2d_array_t   lut,
                                     __read_only image2d_array_t   value,
                                     float scale,
                                     int   zeroPointIn,
                                     int   zeroPointOut,
                                     __write_only image2d_array_t  output)
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord_id = (int4)(z, 0, 0, 0);
    int4 coord = (int4)(x, y, 0, 0);
    int4 coord_out = (int4)(x, y, z, 0);
    int4 index = read_imagei(lut, coord_id);
    uint4 tmp = {0};
    uint4 tmpOut = {0};
    int depth = get_image_array_size(value);

    coord.z = index.s0;
    if(coord.z >= 0 && coord.z < depth)
    {
        tmp = read_imageui(value, coord);
        tmpOut.x = floor((tmp.x - zeroPointIn)*scale + zeroPointOut + 0.5);
        write_imageui(output, coord_out, tmpOut);
    }
}
