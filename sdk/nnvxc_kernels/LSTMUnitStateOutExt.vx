#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"
_viv_uniform VXC_512Bits uniFp16toFp32_4x4;
_viv_uniform VXC_512Bits uniExtractHalf4_4x4;
_viv_uniform VXC_512Bits uniFp16AddFp16toFp32_4x4;
_viv_uniform float logE;
_viv_uniform float twoLogE;
_viv_uniform int num_units;
_viv_uniform float forget_bias;
float4 sigmoid(float4 x)
{
    x *= -logE;
    x = 1 + exp2(x);
    return 1 / x;
}
float4 tangentH(float4 x)
{
    x *= -twoLogE;
    x = 1 + exp2(x);
    x = 1 / x;
    return 2 * x - 1;
}

__kernel void vxcLSTMUnitStateOutExt_F16toF16_P7(
    __read_only  image2d_array_t  inputs_conv,
    __read_only  image2d_array_t  cell_state_in,
    __read_only  image2d_t        biases,
    __write_only image2d_array_t  output,
    __write_only image2d_array_t  cell_state_out,
    __write_only image2d_array_t  hidden_state_out,
    __read_only  image2d_array_t  recurrents_conv
    )
{
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0);
    vxc_short8 vect0, vect1, vect2, vect3, vect4;
    vxc_half8  src0, src1, src2, src3, src4;
    vxc_short8 vect10, vect11, vect12, vect13;
    vxc_half8  src10, src11, src12, src13;
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t;
    float4 bias_i, bias_f, bias_g, bias_o;
    VXC_ReadImage(vect0, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, vect0, 16);
    VXC_ReadImage(vect10, recurrents_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src10, vect10, 16);
    coord_in.z >>= 2;
    bias_i = read_imagef(biases, coord_in.wz);
    coord_in.x += num_units;
    VXC_ReadImage(vect1, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, vect1, 16);
    VXC_ReadImage(vect11, recurrents_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src11, vect11, 16);
    coord_in.w += 4;
    bias_f = read_imagef(biases, coord_in.wz);
    coord_in.x += num_units;
    VXC_ReadImage(vect2, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src2, vect2, 16);
    VXC_ReadImage(vect12, recurrents_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src12, vect12, 16);
    coord_in.x += num_units;
    coord_in.w += 4;
    bias_g = read_imagef(biases, coord_in.wz);
    coord_in.w += 4;
    bias_o = read_imagef(biases, coord_in.wz);
    coord_in.z <<= 2;
    VXC_ReadImage(vect4, cell_state_in, coord_in.zy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src4, vect4, 16);
    VXC_ReadImage(vect3, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src3, vect3, 16);
    VXC_ReadImage(vect13, recurrents_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src13, vect13, 16);

    VXC_DP4x4(data_i_t, src0, src10, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4);
    data_i_t += bias_i;
    VXC_DP4x4(data_f_t, src1, src11, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4);
    data_f_t += bias_f;
    VXC_DP4x4(data_g_t, src2, src12, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4);
    data_g_t += bias_g;
    VXC_DP4x4(data_c_t, src4, src4, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    VXC_DP4x4(data_o_t, src3, src13, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4);
    data_o_t += bias_o;

    half4 dst;
    data_i_t = sigmoid(data_i_t);
    data_f_t = sigmoid(data_f_t + forget_bias);
    data_g_t = tangentH(data_g_t);
    data_i_t = data_i_t * data_g_t;
    data_c_t = data_c_t * data_f_t + data_i_t;
    _viv_asm(CONV, dst, data_c_t);
    VXC_DP4x4(src0, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractHalf4_4x4);
    _viv_asm(COPY, vect0, src0, 8);
    VXC_WriteImage(cell_state_out, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    data_o_t = sigmoid(data_o_t);
    data_f_t = tangentH(data_c_t);
    data_o_t = data_o_t * data_f_t;
    _viv_asm(CONV, dst, data_o_t);
    VXC_DP4x4(src0, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractHalf4_4x4);
    _viv_asm(COPY, vect0, src0, 8);
    VXC_WriteImage(output, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage(hidden_state_out, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}

__kernel void vxcLSTMUnitStateOutExt_F16toF16_Projection_P6(
    __read_only  image2d_array_t  inputs_conv,
    __read_only  image2d_array_t  cell_state_in,
    __read_only  image2d_t        biases,
    __write_only image2d_array_t  output,
    __write_only image2d_array_t  cell_state_out,
    __read_only  image2d_array_t  recurrents_conv
    )
{
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0);
    vxc_short8 vect0, vect1, vect2, vect3, vect4;
    vxc_half8  src0, src1, src2, src3, src4;
    vxc_short8 vect10, vect11, vect12, vect13;
    vxc_half8  src10, src11, src12, src13;
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t;
    float4 bias_i, bias_f, bias_g, bias_o;
    VXC_ReadImage(vect0, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, vect0, 16);
    VXC_ReadImage(vect10, recurrents_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src10, vect10, 16);
    coord_in.z >>= 2;
    bias_i = read_imagef(biases, coord_in.wz);
    coord_in.x += num_units;
    VXC_ReadImage(vect1, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, vect1, 16);
    VXC_ReadImage(vect11, recurrents_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src11, vect11, 16);
    coord_in.w += 4;
    bias_f = read_imagef(biases, coord_in.wz);
    coord_in.x += num_units;
    VXC_ReadImage(vect2, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src2, vect2, 16);
    VXC_ReadImage(vect12, recurrents_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src12, vect12, 16);
    coord_in.x += num_units;
    coord_in.w += 4;
    bias_g = read_imagef(biases, coord_in.wz);
    coord_in.w += 4;
    bias_o = read_imagef(biases, coord_in.wz);
    coord_in.z <<= 2;
    VXC_ReadImage(vect4, cell_state_in, coord_in.zy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src4, vect4, 16);
    VXC_ReadImage(vect3, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src3, vect3, 16);
    VXC_ReadImage(vect13, recurrents_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src13, vect13, 16);

    VXC_DP4x4(data_i_t, src0, src10, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4);
    data_i_t += bias_i;
    VXC_DP4x4(data_f_t, src1, src11, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4);
    data_f_t += bias_f;
    VXC_DP4x4(data_g_t, src2, src12, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4);
    data_g_t += bias_g;
    VXC_DP4x4(data_c_t, src4, src4, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    VXC_DP4x4(data_o_t, src3, src13, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16AddFp16toFp32_4x4);
    data_o_t += bias_o;

    half4 dst;
    data_i_t = sigmoid(data_i_t);
    data_f_t = sigmoid(data_f_t + forget_bias);
    data_g_t = tangentH(data_g_t);
    data_i_t = data_i_t * data_g_t;
    data_c_t = data_c_t * data_f_t + data_i_t;
    _viv_asm(CONV, dst, data_c_t);
    VXC_DP4x4(src0, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractHalf4_4x4);
    _viv_asm(COPY, vect0, src0, 8);
    VXC_WriteImage(cell_state_out, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    data_o_t = sigmoid(data_o_t);
    data_f_t = tangentH(data_c_t);
    data_o_t = data_o_t * data_f_t;
    _viv_asm(CONV, dst, data_o_t);
    VXC_DP4x4(src0, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractHalf4_4x4);
    _viv_asm(COPY, vect0, src0, 8);
    VXC_WriteImage(output, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}

__kernel void vxcLSTMUnitStateOutExt_F16toF16_LN_P6(
    __read_only  image2d_array_t  inputs_conv,
    __read_only  image2d_array_t  cell_state_in,
    __read_only  image2d_t        biases,
    __write_only image2d_array_t  output,
    __write_only image2d_array_t  cell_state_out,
    __write_only image2d_array_t  hidden_state_out
)
{
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0);
    vxc_short8 vect0, vect1, vect2, vect3, vect4;
    vxc_half8  src0, src1, src2, src3, src4;
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t;
    float4 bias_i, bias_f, bias_g, bias_o;
    VXC_ReadImage(vect0, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, vect0, 16);
    coord_in.z >>= 2;
    bias_i = read_imagef(biases, coord_in.wz);
    coord_in.x += num_units;
    VXC_ReadImage(vect1, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, vect1, 16);
    coord_in.w += 4;
    bias_f = read_imagef(biases, coord_in.wz);
    coord_in.x += num_units;
    VXC_ReadImage(vect2, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src2, vect2, 16);
    coord_in.x += num_units;
    coord_in.w += 4;
    bias_g = read_imagef(biases, coord_in.wz);
    coord_in.w += 4;
    bias_o = read_imagef(biases, coord_in.wz);
    coord_in.z <<= 2;
    VXC_ReadImage(vect4, cell_state_in, coord_in.zy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src4, vect4, 16);
    VXC_ReadImage(vect3, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src3, vect3, 16);

    VXC_DP4x4(data_i_t, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    data_i_t += bias_i;
    VXC_DP4x4(data_f_t, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    data_f_t += bias_f;
    VXC_DP4x4(data_g_t, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    data_g_t += bias_g;
    VXC_DP4x4(data_c_t, src4, src4, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    VXC_DP4x4(data_o_t, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    data_o_t += bias_o;

    half4 dst;
    data_i_t = sigmoid(data_i_t);
    data_f_t = sigmoid(data_f_t + forget_bias);
    data_g_t = tangentH(data_g_t);
    data_i_t = data_i_t * data_g_t;
    data_c_t = data_c_t * data_f_t + data_i_t;
    _viv_asm(CONV, dst, data_c_t);
    VXC_DP4x4(src0, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractHalf4_4x4);
    _viv_asm(COPY, vect0, src0, 8);
    VXC_WriteImage(cell_state_out, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    data_o_t = sigmoid(data_o_t);
    data_f_t = tangentH(data_c_t);
    data_o_t = data_o_t * data_f_t;
    _viv_asm(CONV, dst, data_o_t);
    VXC_DP4x4(src0, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractHalf4_4x4);
    _viv_asm(COPY, vect0, src0, 8);
    VXC_WriteImage(output, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    VXC_WriteImage(hidden_state_out, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}

__kernel void vxcLSTMUnitStateOutExt_F16toF16_LN_Projection_P5(
    __read_only  image2d_array_t  inputs_conv,
    __read_only  image2d_array_t  cell_state_in,
    __read_only  image2d_t        biases,
    __write_only image2d_array_t  output,
    __write_only image2d_array_t  cell_state_out
)
{
    int4 coord_in = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), 0);
    vxc_short8 vect0, vect1, vect2, vect3, vect4;
    vxc_half8  src0, src1, src2, src3, src4;
    float4 data_i_t, data_f_t, data_g_t, data_o_t, data_c_t;
    float4 bias_i, bias_f, bias_g, bias_o;
    VXC_ReadImage(vect0, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, vect0, 16);
    coord_in.z >>= 2;
    bias_i = read_imagef(biases, coord_in.wz);
    coord_in.x += num_units;
    VXC_ReadImage(vect1, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, vect1, 16);
    coord_in.w += 4;
    bias_f = read_imagef(biases, coord_in.wz);
    coord_in.x += num_units;
    VXC_ReadImage(vect2, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src2, vect2, 16);
    coord_in.x += num_units;
    coord_in.w += 4;
    bias_g = read_imagef(biases, coord_in.wz);
    coord_in.w += 4;
    bias_o = read_imagef(biases, coord_in.wz);
    coord_in.z <<= 2;
    VXC_ReadImage(vect4, cell_state_in, coord_in.zy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src4, vect4, 16);
    VXC_ReadImage(vect3, inputs_conv, coord_in.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src3, vect3, 16);

    VXC_DP4x4(data_i_t, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    data_i_t += bias_i;
    VXC_DP4x4(data_f_t, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    data_f_t += bias_f;
    VXC_DP4x4(data_g_t, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    data_g_t += bias_g;
    VXC_DP4x4(data_c_t, src4, src4, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    VXC_DP4x4(data_o_t, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    data_o_t += bias_o;

    half4 dst;
    data_i_t = sigmoid(data_i_t);
    data_f_t = sigmoid(data_f_t + forget_bias);
    data_g_t = tangentH(data_g_t);
    data_i_t = data_i_t * data_g_t;
    data_c_t = data_c_t * data_f_t + data_i_t;
    _viv_asm(CONV, dst, data_c_t);
    VXC_DP4x4(src0, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractHalf4_4x4);
    _viv_asm(COPY, vect0, src0, 8);
    VXC_WriteImage(cell_state_out, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
    data_o_t = sigmoid(data_o_t);
    data_f_t = tangentH(data_c_t);
    data_o_t = data_o_t * data_f_t;
    _viv_asm(CONV, dst, data_o_t);
    VXC_DP4x4(src0, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtractHalf4_4x4);
    _viv_asm(COPY, vect0, src0, 8);
    VXC_WriteImage(output, coord_in.zy, vect0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
}
