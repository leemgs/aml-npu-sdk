#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits UniScaletoInt16_2x8;

_viv_uniform float scaleInt16;

__kernel void tensorCopy_Int16 (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 src0;
    VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    half scale;
    _viv_asm(CONV, scale, scaleInt16);
    VXC_DP2x8(src0, src0, scale, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), UniScaletoInt16_2x8);

    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCopy_Int16_2D (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));

    vxc_short8 src0;
    VXC_ReadImage(src0, input,coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    half scale;
    _viv_asm(CONV, scale, scaleInt16);
    VXC_DP2x8(src0, src0, scale, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), UniScaletoInt16_2x8);

    VXC_WriteImage(output, coord.xy, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCopy_16Bits (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 src0;
    VXC_ReadImage2DArray(src0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCopy_16Bits_2D (
    __read_only image2d_array_t input,
    __write_only image2d_array_t output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_short8 src0;
    VXC_ReadImage(src0, input,coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    VXC_WriteImage(output, coord.xy, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniConvertIntegerLo_2x8;
_viv_uniform VXC_512Bits uniConvertIntegerHi_2x8;
#define TENSOR_COPY_I8TO8BITS(dst_name, dst_type) \
__kernel void tensorCopy_I8to##dst_name ( \
    __read_only image2d_array_t  input, \
    __write_only image2d_array_t output) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0); \
    vxc_char16 src0; \
    dst_type dst; \
    VXC_ReadImage2DArray(src0, input,coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
 \
    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8); \
    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerHi_2x8); \
 \
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0)); \
}
TENSOR_COPY_I8TO8BITS(I8, vxc_char16)

#define TENSOR_COPY_I8TO8BITS_2D(dst_name, dst_type) \
__kernel void tensorCopy_I8to##dst_name##_2D ( \
    __read_only image2d_array_t  input, \
    __write_only image2d_array_t output) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
    vxc_char16 src0; \
    dst_type dst; \
    VXC_ReadImage(src0, input,coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
 \
    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8); \
    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerHi_2x8); \
 \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0)); \
}
TENSOR_COPY_I8TO8BITS_2D(I8, vxc_char16)

#define TENSOR_COPY_I8TO16BITS(dst_name, dst_type, copy_type) \
__kernel void tensorCopy_I8to##dst_name ( \
    __read_only image2d_array_t  input, \
    __write_only image2d_array_t output) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0); \
    vxc_char16 src0; \
    dst_type dst0, dst1; \
    copy_type result0, result1; \
    VXC_ReadImage2DArray(src0, input,coord, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
 \
    VXC_DP2x8(dst0, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8); \
    VXC_DP2x8(dst1, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerHi_2x8); \
 \
    _viv_asm(COPY, result0, dst0, 16); \
    _viv_asm(COPY, result1, dst1, 16); \
    VXC_WriteImage2DArray(output, coord, result0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    coord.x += 8; \
    VXC_WriteImage2DArray(output, coord, result1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
TENSOR_COPY_I8TO16BITS(I16, vxc_short8, vxc_short8)
TENSOR_COPY_I8TO16BITS(F16, vxc_half8,  vxc_short8)

#define TENSOR_COPY_I8TO16BITS_2D(dst_name, dst_type, copy_type) \
__kernel void tensorCopy_I8to##dst_name##_2D ( \
    __read_only image2d_array_t  input, \
    __write_only image2d_array_t output) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), get_global_id(1)); \
    vxc_char16 src0; \
    dst_type dst0, dst1; \
    copy_type result0, result1; \
    VXC_ReadImage(src0, input, coord.xy, 0, VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0)); \
 \
    coord.z += 8; \
    VXC_DP2x8(dst0, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8); \
    VXC_DP2x8(dst1, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerHi_2x8); \
 \
    _viv_asm(COPY, result0, dst0, 16); \
    _viv_asm(COPY, result1, dst1, 16); \
    VXC_WriteImage(output, coord.xy, result0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_WriteImage(output, coord.zy, result1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
TENSOR_COPY_I8TO16BITS_2D(I16, vxc_short8, vxc_short8)
TENSOR_COPY_I8TO16BITS_2D(F16, vxc_half8,  vxc_short8)

_viv_uniform VXC_512Bits uniU8MulAndPostShift_Lo_2x8;
_viv_uniform VXC_512Bits uniU8MulAndPostShift_Hi_2x8;
_viv_uniform int2 multAndoutZP;//[0:15] multiplier, [31:63] output zp
__kernel void tensorCopy_UInt8
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_uchar16 src0, dst;
    VXC_ReadImage2DArray(src0, input,coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Hi_2x8);
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCopy_UInt8_2D
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_uchar16 src0, dst;
    VXC_ReadImage(src0, input,coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Hi_2x8);
    VXC_WriteImage(output, coord.xy, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCopy_UInt8toFp16
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_uchar16 src0;
    VXC_ReadImage2DArray(src0, input,coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    vxc_half8 data;
    vxc_short8 dst;

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(data, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniU8MulAndPostShift_Lo_2x8);
    _viv_asm(COPY, dst, data, 16);
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCopy_UInt8toFp16_2D
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_uchar16 src0;
    VXC_ReadImage(src0, input,coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    vxc_half8 data;
    vxc_short8 dst;

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(data, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniU8MulAndPostShift_Lo_2x8);
    _viv_asm(COPY, dst, data, 16);
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCopy_8Bits
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_uchar16 src0;
    VXC_ReadImage2DArray(src0, input,coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCopy_8Bits_2D
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_uchar16 src0;
    VXC_ReadImage(src0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    VXC_WriteImage(output, coord, src0, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCopy_Fp32toFp32
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_float4 src0;
    src0 = read_imagef(input, coord);

    write_imagef(output, coord, src0);
}

_viv_uniform VXC_512Bits uniConvertF16toF32Lo_4x4;
_viv_uniform VXC_512Bits uniConvertF16toF32Hi_4x4;
__kernel void tensorCopy_F16toF32
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 vect;
    vxc_half8 src;
    VXC_ReadImage2DArray(vect, input,coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src, vect, 16);

    vxc_float4 dst0, dst1;
    VXC_DP4x4(dst0, src, src, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertF16toF32Lo_4x4);
    VXC_DP4x4(dst1, src, src, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertF16toF32Hi_4x4);

    write_imagef(output, coord, dst0);
    coord.x += 4;
    write_imagef(output, coord, dst1);
}

__kernel void tensorCopy_F16toF32_2D
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_short8 vect;
    vxc_half8 src;
    VXC_ReadImage(vect, input, coord.xy, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src, vect, 16);

    vxc_float4 dst0, dst1;
    VXC_DP4x4(dst0, src, src, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertF16toF32Lo_4x4);
    VXC_DP4x4(dst1, src, src, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertF16toF32Hi_4x4);

    write_imagef(output, coord, dst0);
    coord.x += 4;
    write_imagef(output, coord, dst1);
}

_viv_uniform VXC_512Bits uniExtract8Data_2x8;
_viv_uniform float outputScale;
_viv_uniform float outputZP;
#define TENSOR_COPY_QUANTIZE(dst_name, conv_type, dst_type, copy_type) \
__kernel void tensorCopy_F32to##dst_name \
    ( \
    __read_only     image2d_array_t input, \
    __write_only    image2d_array_t output \
    ) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0); \
    vxc_float4 src0, src1; \
    src0 = read_imagef(input, coord); \
    coord.x += 4; \
    src1 = read_imagef(input, coord); \
    coord.x -= 4; \
 \
    src0 = src0 * outputScale + outputZP; \
    src1 = src1 * outputScale + outputZP; \
    conv_type dst0, dst1; \
    _viv_asm(CONV_RTE, dst0, src0); \
    _viv_asm(CONV_RTE, dst1, src1); \
 \
    dst_type vec; \
    copy_type dst; \
    VXC_DP2x8(vec, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtract8Data_2x8); \
    _viv_asm(COPY, dst, vec, 16); \
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
}
TENSOR_COPY_QUANTIZE(F16, half4, vxc_half8,  vxc_short8)
TENSOR_COPY_QUANTIZE(I16, int4,  vxc_short8, vxc_short8)
TENSOR_COPY_QUANTIZE(U8,  int4,  vxc_uchar8, vxc_uchar8)
TENSOR_COPY_QUANTIZE(I8,  int4,  vxc_char8,  vxc_char8)

#define TENSOR_COPY_QUANTIZE_2D(dst_name, conv_type, dst_type, copy_type) \
__kernel void tensorCopy_F32to##dst_name##_2D \
    ( \
    __read_only     image2d_t input, \
    __write_only    image2d_array_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
    vxc_float4 src0, src1; \
    src0 = read_imagef(input, coord); \
    coord.x += 4; \
    src1 = read_imagef(input, coord); \
    coord.x -= 4; \
 \
    src0 = src0 * outputScale + outputZP; \
    src1 = src1 * outputScale + outputZP; \
    conv_type dst0, dst1; \
    _viv_asm(CONV_RTE, dst0, src0); \
    _viv_asm(CONV_RTE, dst1, src1); \
 \
    dst_type vec; \
    copy_type dst; \
    VXC_DP2x8(vec, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtract8Data_2x8); \
    _viv_asm(COPY, dst, vec, 16); \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
}
TENSOR_COPY_QUANTIZE_2D(F16, half4, vxc_half8,  vxc_short8)
TENSOR_COPY_QUANTIZE_2D(I16, int4,  vxc_short8, vxc_short8)
TENSOR_COPY_QUANTIZE_2D(U8,  int4,  vxc_uchar8, vxc_uchar8)
TENSOR_COPY_QUANTIZE_2D(I8,  int4,  vxc_char8,  vxc_char8)


_viv_uniform VXC_512Bits uniConvertIntegertoF32Lo_4x4;
_viv_uniform VXC_512Bits uniConvertIntegertoF32Hi_4x4;
_viv_uniform int inputZP;
#define TENSOR_COPY_CONVERT_TO_FP32(src_name, src_type) \
__kernel void tensorCopy_##src_name##toF32 \
    ( \
    __read_only     image2d_array_t input, \
    __write_only    image2d_array_t output \
    ) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0); \
    src_type src; \
    VXC_ReadImage2DArray(src, input,coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    src_type input_zp; \
    _viv_asm(COPY, input_zp, inputZP, 4); \
    vxc_float4 dst0, dst1; \
    VXC_DP4x4(dst0, src, input_zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertIntegertoF32Lo_4x4); \
    VXC_DP4x4(dst1, src, input_zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertIntegertoF32Hi_4x4); \
 \
    write_imagef(output, coord, dst0); \
    coord.x += 4; \
    write_imagef(output, coord, dst1); \
}
TENSOR_COPY_CONVERT_TO_FP32(I8, vxc_char16);
TENSOR_COPY_CONVERT_TO_FP32(U8, vxc_uchar16);
TENSOR_COPY_CONVERT_TO_FP32(I16, vxc_short8);

#define TENSOR_COPY_CONVERT_TO_FP32_2D(src_name, src_type) \
__kernel void tensorCopy_##src_name##toF32_2D \
    ( \
    __read_only     image2d_array_t input, \
    __write_only    image2d_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
    src_type src; \
    VXC_ReadImage(src, input,coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    src_type input_zp; \
    _viv_asm(COPY, input_zp, inputZP, 4); \
    vxc_float4 dst0, dst1; \
    VXC_DP4x4(dst0, src, input_zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertIntegertoF32Lo_4x4); \
    VXC_DP4x4(dst1, src, input_zp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertIntegertoF32Hi_4x4); \
 \
    write_imagef(output, coord, dst0); \
    coord.x += 4; \
    write_imagef(output, coord, dst1); \
}
TENSOR_COPY_CONVERT_TO_FP32_2D(I8, vxc_char16);
TENSOR_COPY_CONVERT_TO_FP32_2D(U8, vxc_uchar16);
TENSOR_COPY_CONVERT_TO_FP32_2D(I16, vxc_short8);

__kernel void tensorCopy_F16toI8 (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 v0, v1;
    vxc_half8 src0, src1;
    vxc_char16 dst;
    VXC_ReadImage2DArray(v0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, v0, 16);
    VXC_ReadImage2DArray(v1, input, coord, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, v1, 16);

    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8);
    VXC_DP2x8(dst, src1, src1, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8);

    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCopy_F16toI8_2D (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_short8 v0, v1;
    vxc_half8 src0, src1;
    vxc_char16 dst;
    VXC_ReadImage(v0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, v0, 16);
    VXC_ReadImage(v1, input, coord, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, v1, 16);

    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8);
    VXC_DP2x8(dst, src1, src1, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8);

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCopy_F16toI16 (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 v0;
    vxc_half8 src0;
    vxc_short8 dst;
    VXC_ReadImage2DArray(v0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, v0, 16);

    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8);

    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCopy_F16toI16_2D (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_short8 v0;
    vxc_half8 src0;
    vxc_char16 dst;
    VXC_ReadImage(v0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, v0, 16);

    VXC_DP2x8(dst, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniConvertIntegerLo_2x8);

    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCopy_F16toU8
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_short8 v0, v1;
    vxc_half8 src0, src1;
    vxc_uchar16 dst;
    VXC_ReadImage2DArray(v0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, v0, 16);
    VXC_ReadImage2DArray(v1, input, coord, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, v1, 16);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, src1, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

__kernel void tensorCopy_F16toU8_2D
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    vxc_short8 v0, v1;
    vxc_half8 src0, src1;
    vxc_uchar16 dst;

    VXC_ReadImage(v0, input, coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, v0, 16);
    VXC_ReadImage(v1, input, coord, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, v1, 16);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, src0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, src1, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);

    VXC_WriteImage(output, coord.xy, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}

