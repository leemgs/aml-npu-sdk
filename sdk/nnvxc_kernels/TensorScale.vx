#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniU8SubZPtoFp32_4x4;
_viv_uniform VXC_512Bits uniExtact8Bit_2x8;
_viv_uniform VXC_512Bits uniFp16toFp32_4x4;
_viv_uniform VXC_512Bits uniRightSubLeft_4x4;
_viv_uniform VXC_512Bits uniExtactHalf8_2x8;
_viv_uniform float2 scale_xy;
_viv_uniform int depth;
_viv_uniform int input_ZP;
_viv_uniform float uint8Scale;
_viv_uniform float output_ZP;
__kernel void vxcTensorScale_Bilinear_fp16
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;
    float4 left_x_f    = floor(in_x);
    float4 x_lerp      = in_x - left_x_f;
    int4   left_x_idx  = convert_int4(left_x_f);
    float4 right_x_f   = ceil(in_x);
    int4   right_x_idx = convert_int4(right_x_f);
    float  in_y        = convert_float(coord_out.y) * scale_xy.y;
    float  top_y_f     = floor(in_y);
    float  y_lerp      = in_y - top_y_f;
    int    top_y_idx   = convert_int(top_y_f);
    float  bottom_y_f  = ceil(in_y);
    int    bottom_y_idx= convert_int(bottom_y_f);
    vxc_short8 top_left0, top_right0;
    vxc_short8 bottom_left0, bottom_right0;
    vxc_half8 top_left, top_right;
    vxc_half8 bottom_left, bottom_right;
    int4 coord_in = (int4)(left_x_idx.x, top_y_idx, coord_out.z, 0);

    VXC_ReadImage2DArray(top_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.y;
    VXC_ReadImage2DArray(top_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.z;
    VXC_ReadImage2DArray(top_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.w;
    VXC_ReadImage2DArray(top_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, top_left, top_left0, 16);

    coord_in.x = right_x_idx.x;
    VXC_ReadImage2DArray(top_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.y;
    VXC_ReadImage2DArray(top_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.z;
    VXC_ReadImage2DArray(top_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.w;
    VXC_ReadImage2DArray(top_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, top_right, top_right0, 16);

    coord_in.y = bottom_y_idx;
    coord_in.x = left_x_idx.x;
    VXC_ReadImage2DArray(bottom_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.y;
    VXC_ReadImage2DArray(bottom_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.z;
    VXC_ReadImage2DArray(bottom_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.w;
    VXC_ReadImage2DArray(bottom_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, bottom_left, bottom_left0, 16);

    coord_in.x = right_x_idx.x;
    VXC_ReadImage2DArray(bottom_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.y;
    VXC_ReadImage2DArray(bottom_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.z;
    VXC_ReadImage2DArray(bottom_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.w;
    VXC_ReadImage2DArray(bottom_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, bottom_right, bottom_right0, 16);

    float4 left4;
    float4 right4;
    float4 top4;
    float4 bottom4;

    VXC_DP4x4(left4, top_left, top_left, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    VXC_DP4x4(right4, top_right, top_left, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniRightSubLeft_4x4);

    top4        = right4 * x_lerp + left4;

    VXC_DP4x4(left4, bottom_left, bottom_left, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    VXC_DP4x4(right4, bottom_right, bottom_left, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniRightSubLeft_4x4);

    bottom4      = right4 * x_lerp + left4;

    bottom4     -= top4;
    float4 dst4  = bottom4 * y_lerp + top4;

    half4 tmp;

    _viv_asm(CONV, tmp, dst4);

    VXC_DP2x8(top_left, tmp, tmp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtactHalf8_2x8);
    _viv_asm(COPY, top_left0, top_left, 16);
    VXC_WriteImage2DArray(output, coord_out, top_left0, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
}
__kernel void vxcTensorScale_Bilinear_fp16tou8
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;
    float4 left_x_f    = floor(in_x);
    float4 x_lerp      = in_x - left_x_f;
    int4   left_x_idx  = convert_int4(left_x_f);
    float4 right_x_f   = ceil(in_x);
    int4   right_x_idx = convert_int4(right_x_f);
    float  in_y        = convert_float(coord_out.y) * scale_xy.y;
    float  top_y_f     = floor(in_y);
    float  y_lerp      = in_y - top_y_f;
    int    top_y_idx   = convert_int(top_y_f);
    float  bottom_y_f  = ceil(in_y);
    int    bottom_y_idx= convert_int(bottom_y_f);
    vxc_short8 top_left0, top_right0;
    vxc_short8 bottom_left0, bottom_right0;
    vxc_half8 top_left, top_right;
    vxc_half8 bottom_left, bottom_right;
    int4 coord_in = (int4)(left_x_idx.x, top_y_idx, coord_out.z, 0);

    VXC_ReadImage2DArray(top_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.y;
    VXC_ReadImage2DArray(top_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.z;
    VXC_ReadImage2DArray(top_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.w;
    VXC_ReadImage2DArray(top_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, top_left, top_left0, 16);

    coord_in.x = right_x_idx.x;
    VXC_ReadImage2DArray(top_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.y;
    VXC_ReadImage2DArray(top_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.z;
    VXC_ReadImage2DArray(top_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.w;
    VXC_ReadImage2DArray(top_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, top_right, top_right0, 16);

    coord_in.y = bottom_y_idx;
    coord_in.x = left_x_idx.x;
    VXC_ReadImage2DArray(bottom_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.y;
    VXC_ReadImage2DArray(bottom_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.z;
    VXC_ReadImage2DArray(bottom_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.w;
    VXC_ReadImage2DArray(bottom_left0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, bottom_left, bottom_left0, 16);

    coord_in.x = right_x_idx.x;
    VXC_ReadImage2DArray(bottom_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.y;
    VXC_ReadImage2DArray(bottom_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.z;
    VXC_ReadImage2DArray(bottom_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.w;
    VXC_ReadImage2DArray(bottom_right0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, bottom_right, bottom_right0, 16);

    float4 left4;
    float4 right4;
    float4 top4;
    float4 bottom4;

    VXC_DP4x4(left4, top_left, top_left, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    VXC_DP4x4(right4, top_right, top_left, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniRightSubLeft_4x4);

    top4        = right4 * x_lerp + left4;

    VXC_DP4x4(left4, bottom_left, bottom_left, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
    VXC_DP4x4(right4, bottom_right, bottom_left, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniRightSubLeft_4x4);

    bottom4      = right4 * x_lerp + left4;

    bottom4     -= top4;
    float4 dst4  = bottom4 * y_lerp + top4;

    dst4         = dst4 * uint8Scale + output_ZP;

    int4 dst     = convert_int4_rte(dst4);

    vxc_uchar8 dst_uchar;

    VXC_DP2x8(dst_uchar, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
    VXC_WriteImage2DArray(output, coord_out, dst_uchar, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxcTensorScale_Bilinear_uint8
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;
    float4 left_x_f    = floor(in_x);
    float4 x_lerp      = in_x - left_x_f;
    int4   left_x_idx  = convert_int4(left_x_f);
    float4 right_x_f   = ceil(in_x);
    int4   right_x_idx = convert_int4(right_x_f);
    float  in_y        = convert_float(coord_out.y) * scale_xy.y;
    float  top_y_f     = floor(in_y);
    float  y_lerp      = in_y - top_y_f;
    int    top_y_idx   = convert_int(top_y_f);
    float  bottom_y_f  = ceil(in_y);
    int    bottom_y_idx= convert_int(bottom_y_f);
    vxc_uchar16 top_left, top_right;
    vxc_uchar16 bottom_left, bottom_right;
    int4 coord_in = (int4)(left_x_idx.x, top_y_idx, coord_out.z, 0);

    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.y;
    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.z;
    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.w;
    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    coord_in.x = right_x_idx.x;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.y;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.z;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.w;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    coord_in.y = bottom_y_idx;
    coord_in.x = left_x_idx.x;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.y;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.z;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.w;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    coord_in.x = right_x_idx.x;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.y;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.z;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.w;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    float4 left4;
    float4 right4;
    float4 top4;
    float4 bottom4;

    unsigned char inputZP;
    _viv_asm(COPY, inputZP, input_ZP, 4);
    VXC_DP4x4(left4, top_left, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZPtoFp32_4x4);
    VXC_DP4x4(right4, top_right, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZPtoFp32_4x4);

    right4      -= left4;
    top4        = right4 * x_lerp + left4;

    VXC_DP4x4(left4, bottom_left, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZPtoFp32_4x4);
    VXC_DP4x4(right4, bottom_right, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZPtoFp32_4x4);

    right4      -= left4;
    bottom4      = right4 * x_lerp + left4;

    bottom4     -= top4;
    float4 dst4  = bottom4 * y_lerp + top4;

    dst4         = dst4 * uint8Scale + output_ZP;

    int4 dst     = convert_int4_rte(dst4);

    VXC_DP2x8(top_left, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
    VXC_WriteImage2DArray(output, coord_out, top_left, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniU8SubZP2XtoFp16Hi_4x4;
_viv_uniform VXC_512Bits uniU8SubZP2XtoFp16Lo_4x4;
_viv_uniform VXC_512Bits uniF16AddFp16Shift1_2x8;
_viv_uniform VXC_512Bits uniMultiplyAndPostShift_2x8;
_viv_uniform int2 multAndoutZP;//[0:15] multiplier, [31:63] output zp
__kernel void vxcTensorScale_Bilinear_uint8_2x_upsample
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4 coord_in   =  (int4)(get_global_id(0) >> 1, get_global_id(1) >> 1, get_global_id(2), 0);

    vxc_uchar16 top, bottom;

    VXC_ReadImage2DArray(top,    input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(bottom, input, coord_in, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));

    vxc_half8 top8;
    vxc_half8 bottom8;

    unsigned char inputZP;
    _viv_asm(COPY, inputZP, input_ZP, 4);
    VXC_DP4x4(top8, top, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZP2XtoFp16Lo_4x4);
    VXC_DP4x4(top8, top, inputZP, VXC_MODIFIER(4, 7, 0, VXC_RM_TowardZero, 0), uniU8SubZP2XtoFp16Hi_4x4);
    VXC_DP4x4(bottom8, bottom, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZP2XtoFp16Lo_4x4);
    VXC_DP4x4(bottom8, bottom, inputZP, VXC_MODIFIER(4, 7, 0, VXC_RM_TowardZero, 0), uniU8SubZP2XtoFp16Hi_4x4);

    VXC_DP2x8(bottom8, bottom8, top8, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniF16AddFp16Shift1_2x8);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(top, top8, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x8);
    VXC_DP2x8(bottom, bottom8, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x8);

    VXC_WriteImage2DArray(output, coord_out, top, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord_out.y ++;
    VXC_WriteImage2DArray(output, coord_out, bottom, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxcTensorScale_Bilinear_uint8tofp16_2x_upsample
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4 coord_in   =  (int4)(get_global_id(0) >> 1, get_global_id(1) >> 1, get_global_id(2), 0);

    vxc_uchar16 top, bottom;

    VXC_ReadImage2DArray(top,    input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(bottom, input, coord_in, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));

    vxc_half8 top8;
    vxc_half8 bottom8;

    unsigned char inputZP;
    _viv_asm(COPY, inputZP, input_ZP, 4);
    VXC_DP4x4(top8, top, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZP2XtoFp16Lo_4x4);
    VXC_DP4x4(top8, top, inputZP, VXC_MODIFIER(4, 7, 0, VXC_RM_TowardZero, 0), uniU8SubZP2XtoFp16Hi_4x4);
    VXC_DP4x4(bottom8, bottom, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZP2XtoFp16Lo_4x4);
    VXC_DP4x4(bottom8, bottom, inputZP, VXC_MODIFIER(4, 7, 0, VXC_RM_TowardZero, 0), uniU8SubZP2XtoFp16Hi_4x4);

    VXC_DP2x8(bottom8, bottom8, top8, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniF16AddFp16Shift1_2x8);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(top8, top8, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), uniMultiplyAndPostShift_2x8);
    VXC_DP2x8(bottom8, bottom8, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), uniMultiplyAndPostShift_2x8);

    vxc_short8 dst;
    _viv_asm(COPY, dst, top8, 16);
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord_out.y ++;
    _viv_asm(COPY, dst, bottom8, 16);
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniF16Mul3AddFp16Mul1Shift2_2x8;
_viv_uniform VXC_512Bits uniF16Mul1AddFp16Mul3Shift2_2x8;
_viv_uniform VXC_512Bits uniU8SubZP4XtoFp16Lo_4x4;
_viv_uniform VXC_512Bits uniU8SubZP4XtoFp16Hi_4x4;
__kernel void vxcTensorScale_Bilinear_uint8_4x_upsample
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4 coord_in   =  (int4)(get_global_id(0) >> 2, get_global_id(1) >> 2, get_global_id(2), 0);

    vxc_uchar16 top, bottom;

    VXC_ReadImage2DArray(top,    input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(bottom, input, coord_in, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));

    vxc_half8 top8, bottom8, part8;

    unsigned char inputZP;
    _viv_asm(COPY, inputZP, input_ZP, 4);
    VXC_DP4x4(top8, top, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZP4XtoFp16Lo_4x4);
    VXC_DP4x4(top8, top, inputZP, VXC_MODIFIER(4, 7, 0, VXC_RM_TowardZero, 0), uniU8SubZP4XtoFp16Hi_4x4);
    VXC_DP4x4(bottom8, bottom, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZP4XtoFp16Lo_4x4);
    VXC_DP4x4(bottom8, bottom, inputZP, VXC_MODIFIER(4, 7, 0, VXC_RM_TowardZero, 0), uniU8SubZP4XtoFp16Hi_4x4);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(top, top8, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x8);

    VXC_DP2x8(part8, top8, bottom8, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniF16Mul3AddFp16Mul1Shift2_2x8);

    VXC_DP2x8(bottom, part8, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x8);

    VXC_WriteImage2DArray(output, coord_out, top, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord_out.y ++;
    VXC_WriteImage2DArray(output, coord_out, bottom, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord_out.y ++;

    VXC_DP2x8(part8, top8, bottom8, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniF16AddFp16Shift1_2x8);
    VXC_DP2x8(top8, top8, bottom8, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniF16Mul1AddFp16Mul3Shift2_2x8);

    VXC_DP2x8(top, part8, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x8);
    VXC_DP2x8(bottom, top8, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x8);

    VXC_WriteImage2DArray(output, coord_out, top, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord_out.y ++;
    VXC_WriteImage2DArray(output, coord_out, bottom, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxcTensorScale_Bilinear_uint8tofp16_4x_upsample
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4 coord_in   =  (int4)(get_global_id(0) >> 2, get_global_id(1) >> 2, get_global_id(2), 0);

    vxc_uchar16 top, bottom;

    VXC_ReadImage2DArray(top,    input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(bottom, input, coord_in, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));

    vxc_half8 top8, bottom8, dst0, dst1;
    vxc_short8 dst;

    unsigned char inputZP;
    _viv_asm(COPY, inputZP, input_ZP, 4);
    VXC_DP4x4(top8, top, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZP4XtoFp16Lo_4x4);
    VXC_DP4x4(top8, top, inputZP, VXC_MODIFIER(4, 7, 0, VXC_RM_TowardZero, 0), uniU8SubZP4XtoFp16Hi_4x4);
    VXC_DP4x4(bottom8, bottom, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZP4XtoFp16Lo_4x4);
    VXC_DP4x4(bottom8, bottom, inputZP, VXC_MODIFIER(4, 7, 0, VXC_RM_TowardZero, 0), uniU8SubZP4XtoFp16Hi_4x4);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst0, top8, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), uniMultiplyAndPostShift_2x8);

    VXC_DP2x8(dst1, top8, bottom8, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniF16Mul3AddFp16Mul1Shift2_2x8);

    VXC_DP2x8(dst1, dst1, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), uniMultiplyAndPostShift_2x8);

    _viv_asm(COPY, dst, dst0, 16);
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord_out.y ++;
    _viv_asm(COPY, dst, dst1, 16);
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord_out.y ++;

    VXC_DP2x8(dst0, top8, bottom8, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniF16AddFp16Shift1_2x8);
    VXC_DP2x8(dst1, top8, bottom8, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniF16Mul1AddFp16Mul3Shift2_2x8);

    VXC_DP2x8(dst0, dst0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), uniMultiplyAndPostShift_2x8);
    VXC_DP2x8(dst1, dst1, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), uniMultiplyAndPostShift_2x8);

    _viv_asm(COPY, dst, dst0, 16);
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord_out.y ++;
    _viv_asm(COPY, dst, dst1, 16);
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniFp16_4xResizeBilinear_2x8;
__kernel void vxcTensorScale_Bilinear_fp16touint8_4x_upsample
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4 coord_in   =  (int4)(get_global_id(0) >> 2, get_global_id(1) >> 2, get_global_id(2), 0);

    vxc_short8  line0, line1;
    vxc_half8 top, bottom;

    VXC_ReadImage2DArray(line0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, top, line0, 16);
    VXC_ReadImage2DArray(line1, input, coord_in, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, bottom, line1, 16);

    vxc_half8 top8, bottom8;
    vxc_uchar16 dst0, dst1;

    unsigned char inputZP;
    _viv_asm(COPY, inputZP, input_ZP, 4);
    VXC_DP2x8(top8, top, top, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniFp16_4xResizeBilinear_2x8);
    VXC_DP2x8(bottom8, bottom, bottom, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniFp16_4xResizeBilinear_2x8);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst0, top8, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x8);

    VXC_DP2x8(top, top8, bottom8, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniF16Mul3AddFp16Mul1Shift2_2x8);

    VXC_DP2x8(dst1, top, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x8);

    VXC_WriteImage2DArray(output, coord_out, dst0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord_out.y ++;
    VXC_WriteImage2DArray(output, coord_out, dst1, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord_out.y ++;

    VXC_DP2x8(top, top8, bottom8, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniF16AddFp16Shift1_2x8);
    VXC_DP2x8(top8, top8, bottom8, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniF16Mul1AddFp16Mul3Shift2_2x8);

    VXC_DP2x8(dst0, top, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x8);
    VXC_DP2x8(dst1, top8, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniMultiplyAndPostShift_2x8);

    VXC_WriteImage2DArray(output, coord_out, dst0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord_out.y ++;
    VXC_WriteImage2DArray(output, coord_out, dst1, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxcTensorScale_Bilinear_uint8tofp16
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;
    float4 left_x_f    = floor(in_x);
    float4 x_lerp      = in_x - left_x_f;
    int4   left_x_idx  = convert_int4(left_x_f);
    float4 right_x_f   = ceil(in_x);
    int4   right_x_idx = convert_int4(right_x_f);
    float  in_y        = convert_float(coord_out.y) * scale_xy.y;
    float  top_y_f     = floor(in_y);
    float  y_lerp      = in_y - top_y_f;
    int    top_y_idx   = convert_int(top_y_f);
    float  bottom_y_f  = ceil(in_y);
    int    bottom_y_idx= convert_int(bottom_y_f);
    vxc_uchar16 top_left, top_right;
    vxc_uchar16 bottom_left, bottom_right;
    int4 coord_in = (int4)(left_x_idx.x, top_y_idx, coord_out.z, 0);

    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.y;
    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.z;
    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.w;
    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    coord_in.x = right_x_idx.x;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.y;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.z;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.w;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    coord_in.y = bottom_y_idx;
    coord_in.x = left_x_idx.x;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.y;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.z;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.w;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    coord_in.x = right_x_idx.x;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.y;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.z;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.w;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    float4 left4;
    float4 right4;
    float4 top4;
    float4 bottom4;

    unsigned char inputZP;
    _viv_asm(COPY, inputZP, input_ZP, 4);
    VXC_DP4x4(left4, top_left, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZPtoFp32_4x4);
    VXC_DP4x4(right4, top_right, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZPtoFp32_4x4);

    right4      -= left4;
    top4        = right4 * x_lerp + left4;

    VXC_DP4x4(left4, bottom_left, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZPtoFp32_4x4);
    VXC_DP4x4(right4, bottom_right, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZPtoFp32_4x4);

    right4      -= left4;
    bottom4      = right4 * x_lerp + left4;

    bottom4     -= top4;
    float4 dst4  = bottom4 * y_lerp + top4;

    dst4 *=  uint8Scale;

    half4 dst;
    _viv_asm(CONV, dst, dst4);

    vxc_short8 dst_short;
    _viv_asm(COPY, dst_short, dst, 16);

    VXC_WriteImage2DArray(output, coord_out, dst_short.s0246, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniHorz16BitsPart0_4x_2x8;
_viv_uniform VXC_512Bits uniHorz16BitsPart1_4x_2x8;
_viv_uniform VXC_512Bits uniVert16BitsSec1Part0_4x_4x4;
_viv_uniform VXC_512Bits uniVert16BitsSec1Part1_4x_4x4;
_viv_uniform VXC_512Bits uniVert16BitsSec1Part2_4x_4x4;
_viv_uniform VXC_512Bits uniVert16BitsSec1Part3_4x_4x4;
_viv_uniform VXC_512Bits uniVert16BitsSec2Part0_4x_4x4;
_viv_uniform VXC_512Bits uniVert16BitsSec2Part1_4x_4x4;
_viv_uniform VXC_512Bits uniVert16BitsSec2Part2_4x_4x4;
_viv_uniform VXC_512Bits uniVert16BitsSec2Part3_4x_4x4;
_viv_uniform VXC_512Bits uniVert16BitsSec3Part0_4x_4x4;
_viv_uniform VXC_512Bits uniVert16BitsSec3Part1_4x_4x4;
_viv_uniform VXC_512Bits uniVert16BitsSec3Part2_4x_4x4;
_viv_uniform VXC_512Bits uniVert16BitsSec3Part3_4x_4x4;
#define TENSORSCALE_BILINEAR_4X(name0, name1, src_type, copy_src_type, dst_type, copy_dst_type) \
    __kernel void vxcTensorScale_Bilinear_4x_##name0##to##name1 \
    ( \
    __read_only     image2d_array_t input, \
    __write_only    image2d_array_t output \
    ) \
{ \
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0); \
    int4 coord_in   =  (int4)(get_global_id(0) >> 2, get_global_id(1) >> 2, get_global_id(2), 0); \
    vxc_short8      vec0, vec1; \
    vxc_half8       src0, src1; \
    vxc_half8       dst0, dst1; \
    vxc_short8      dst2, dst3; \
    \
    VXC_ReadImage2DArray(vec0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src0, vec0, 16); \
    VXC_ReadImage2DArray(vec1, input, coord_in, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, vec1, 16); \
    \
    VXC_DP2x8(dst0, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniHorz16BitsPart0_4x_2x8); \
    VXC_DP2x8(dst1, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniHorz16BitsPart1_4x_2x8); \
    \
    _viv_asm(COPY, dst2, dst0, 16); \
    _viv_asm(COPY, dst3, dst1, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst2, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.x += 8; \
    VXC_WriteImage2DArray(output, coord_out, dst3, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.xy += (int2)(-8, 1); \
    \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniVert16BitsSec1Part0_4x_4x4); \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(4, 7, 0, VXC_RM_ToNearestEven, 1), uniVert16BitsSec1Part1_4x_4x4); \
    VXC_DP4x4(dst1, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniVert16BitsSec1Part2_4x_4x4); \
    VXC_DP4x4(dst1, src0, src1, VXC_MODIFIER(4, 7, 0, VXC_RM_ToNearestEven, 1), uniVert16BitsSec1Part3_4x_4x4); \
    \
    _viv_asm(COPY, dst2, dst0, 16); \
    _viv_asm(COPY, dst3, dst1, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst2, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.x += 8; \
    VXC_WriteImage2DArray(output, coord_out, dst3, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.xy += (int2)(-8, 1); \
    \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniVert16BitsSec2Part0_4x_4x4); \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(4, 7, 0, VXC_RM_ToNearestEven, 1), uniVert16BitsSec2Part1_4x_4x4); \
    VXC_DP4x4(dst1, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniVert16BitsSec2Part2_4x_4x4); \
    VXC_DP4x4(dst1, src0, src1, VXC_MODIFIER(4, 7, 0, VXC_RM_ToNearestEven, 1), uniVert16BitsSec2Part3_4x_4x4); \
    \
    _viv_asm(COPY, dst2, dst0, 16); \
    _viv_asm(COPY, dst3, dst1, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst2, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.x += 8; \
    VXC_WriteImage2DArray(output, coord_out, dst3, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.xy += (int2)(-8, 1); \
    \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniVert16BitsSec3Part0_4x_4x4); \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(4, 7, 0, VXC_RM_ToNearestEven, 1), uniVert16BitsSec3Part1_4x_4x4); \
    VXC_DP4x4(dst1, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniVert16BitsSec3Part2_4x_4x4); \
    VXC_DP4x4(dst1, src0, src1, VXC_MODIFIER(4, 7, 0, VXC_RM_ToNearestEven, 1), uniVert16BitsSec3Part3_4x_4x4); \
    \
    _viv_asm(COPY, dst2, dst0, 16); \
    _viv_asm(COPY, dst3, dst1, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst2, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.x += 8; \
    VXC_WriteImage2DArray(output, coord_out, dst3, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
}

TENSORSCALE_BILINEAR_4X(Fp16,  Fp16,  vxc_short8, vxc_half8,  vxc_half8,  vxc_short8)
    //TENSORSCALE_BILINEAR_4X(Int16, Int16, vxc_short8, vxc_short8, vxc_short8, vxc_short8)
    _viv_uniform VXC_512Bits uniHorz16BitsLo_2x_2x8;
_viv_uniform VXC_512Bits uniHorz16BitsHi_2x_2x8;
_viv_uniform VXC_512Bits uniVert16BitsPart0_2x_4x4;
_viv_uniform VXC_512Bits uniVert16BitsPart1_2x_4x4;
_viv_uniform VXC_512Bits uniVert16BitsPart2_2x_4x4;

#define TENSORSCALE_BILINEAR_2X(name0, name1, src_type, copy_src_type, dst_type, copy_dst_type) \
    __kernel void vxcTensorScale_Bilinear_2x_##name0##to##name1 \
    ( \
    __read_only     image2d_array_t input, \
    __write_only    image2d_array_t output \
    ) \
{ \
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0); \
    int4 coord_in   =  (int4)(get_global_id(0) >> 1, get_global_id(1) >> 1, get_global_id(2), 0); \
    src_type        vec0, vec1; \
    copy_src_type   src0, src1; \
    dst_type        dst0, dst1; \
    copy_dst_type   dst2, dst3; \
    \
    VXC_ReadImage2DArray(vec0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src0, vec0, 16); \
    VXC_ReadImage2DArray(vec1, input, coord_in, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, vec1, 16); \
    \
    VXC_DP2x8(dst0, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniHorz16BitsLo_2x_2x8); \
    VXC_DP2x8(dst1, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniHorz16BitsHi_2x_2x8); \
    \
    _viv_asm(COPY, dst2, dst0, 16); \
    _viv_asm(COPY, dst3, dst1, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst2, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.x += 8; \
    VXC_WriteImage2DArray(output, coord_out, dst3, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0)); \
    coord_out.xy += (int2)(-8, 1); \
    \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniVert16BitsPart0_2x_4x4); \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(4, 7, 0, VXC_RM_ToNearestEven, 1), uniVert16BitsPart1_2x_4x4); \
    VXC_DP4x4(dst1, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniVert16BitsPart2_2x_4x4); \
    \
    _viv_asm(COPY, dst2, dst0, 16); \
    _viv_asm(COPY, dst3, dst1, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst2, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.x += 8; \
    VXC_WriteImage2DArray(output, coord_out, dst3, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0)); \
}

TENSORSCALE_BILINEAR_2X(Fp16,  Fp16,  vxc_short8, vxc_half8,  vxc_half8,  vxc_short8)
    //TENSORSCALE_BILINEAR_2X(Int16, Int16, vxc_short8, vxc_short8, vxc_short8, vxc_short8)

    _viv_uniform VXC_512Bits uniHorzPart0_8x_2x8;
_viv_uniform VXC_512Bits uniVertSec1Part0_8x_4x4;
_viv_uniform VXC_512Bits uniVertSec1Part1_8x_4x4;
_viv_uniform VXC_512Bits uniVertSec2Part0_8x_4x4;
_viv_uniform VXC_512Bits uniVertSec2Part1_8x_4x4;
_viv_uniform VXC_512Bits uniVertSec3Part0_8x_4x4;
_viv_uniform VXC_512Bits uniVertSec3Part1_8x_4x4;
_viv_uniform VXC_512Bits uniVertSec4Part0_8x_4x4;
_viv_uniform VXC_512Bits uniVertSec4Part1_8x_4x4;
_viv_uniform VXC_512Bits uniVertSec5Part0_8x_4x4;
_viv_uniform VXC_512Bits uniVertSec5Part1_8x_4x4;
_viv_uniform VXC_512Bits uniVertSec6Part0_8x_4x4;
_viv_uniform VXC_512Bits uniVertSec6Part1_8x_4x4;
_viv_uniform VXC_512Bits uniVertSec7Part0_8x_4x4;
_viv_uniform VXC_512Bits uniVertSec7Part1_8x_4x4;
_viv_uniform VXC_512Bits uniTop2andBottom2toFp32_4x4;
__kernel void vxcTensorScale_Bilinear_16x_Fp16toFp16
    (
    __read_only     image2d_array_t input,
    __write_only    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    int4 coord_in   =  (int4)(get_global_id(0) >> 4, get_global_id(1) >> 4, get_global_id(2), 0);
    vxc_short8      vec0, vec1;
    vxc_half8       src0, src1;

    VXC_ReadImage2DArray(vec0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, vec0, 16);
    VXC_ReadImage2DArray(vec1, input, coord_in, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, vec1, 16);

    vxc_float4 pixel;
    VXC_DP4x4(pixel, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniTop2andBottom2toFp32_4x4);

    int x, y;
    float4 y_lerp = (float4)(0, 0, 0, 0);
    for (y = 0; y < 16; y ++)
    {
        float4 x_lerp  = (float4)(0, 0.0625, 0.125, 0.1875);
        for (x = 0; x < 16; x +=4)
        {
            float4 top              = pixel.xxxx + (pixel.yyyy - pixel.xxxx) * x_lerp;
            float4 bottom           = pixel.zzzz + (pixel.wwww - pixel.zzzz) * x_lerp;
            float4 interpolation    = top + (bottom - top) * y_lerp;

            half4 tmp;
            _viv_asm(CONV, tmp, interpolation);
            vxc_short8 dst;
            _viv_asm(COPY, dst, tmp, 16);
            VXC_WriteImage2DArray(output, coord_out, dst.s0246, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
            coord_out.x += 4;

            x_lerp += 0.25;
        }

        coord_out.xy += (int2)(-16, 1);

        y_lerp += 0.0625;
    }
}
#define TENSORSCALE_BILINEAR_8X(name0, name1, src_type, copy_src_type, dst_type, copy_dst_type) \
    __kernel void vxcTensorScale_Bilinear_8x_##name0##to##name1 \
    ( \
    __read_only     image2d_array_t input, \
    __write_only    image2d_array_t output \
    ) \
{ \
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0); \
    int4 coord_in   =  (int4)(get_global_id(0) >> 3, get_global_id(1) >> 3, get_global_id(2), 0); \
    src_type        vec0, vec1; \
    copy_src_type   src0, src1; \
    dst_type        dst0; \
    copy_dst_type   dst2; \
    \
    VXC_ReadImage2DArray(vec0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src0, vec0, 16); \
    VXC_ReadImage2DArray(vec1, input, coord_in, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src1, vec1, 16); \
    \
    VXC_DP2x8(dst0, src0, src0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniHorzPart0_8x_2x8); \
    \
    _viv_asm(COPY, dst2, dst0, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst2, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.y ++; \
    \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniVertSec1Part0_8x_4x4); \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(4, 7, 0, VXC_RM_ToNearestEven, 1), uniVertSec1Part1_8x_4x4); \
    \
    _viv_asm(COPY, dst2, dst0, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst2, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.y ++; \
    \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniVertSec2Part0_8x_4x4); \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(4, 7, 0, VXC_RM_ToNearestEven, 1), uniVertSec2Part1_8x_4x4); \
    \
    _viv_asm(COPY, dst2, dst0, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst2, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.y ++; \
    \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniVertSec3Part0_8x_4x4); \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(4, 7, 0, VXC_RM_ToNearestEven, 1), uniVertSec3Part1_8x_4x4); \
    \
    _viv_asm(COPY, dst2, dst0, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst2, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.y ++; \
    \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniVertSec4Part0_8x_4x4); \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(4, 7, 0, VXC_RM_ToNearestEven, 1), uniVertSec4Part1_8x_4x4); \
    \
    _viv_asm(COPY, dst2, dst0, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst2, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.y ++; \
    \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniVertSec5Part0_8x_4x4); \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(4, 7, 0, VXC_RM_ToNearestEven, 1), uniVertSec5Part1_8x_4x4); \
    \
    _viv_asm(COPY, dst2, dst0, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst2, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.y ++; \
    \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniVertSec6Part0_8x_4x4); \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(4, 7, 0, VXC_RM_ToNearestEven, 1), uniVertSec6Part1_8x_4x4); \
    \
    _viv_asm(COPY, dst2, dst0, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst2, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
    coord_out.y ++; \
    \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniVertSec7Part0_8x_4x4); \
    VXC_DP4x4(dst0, src0, src1, VXC_MODIFIER(4, 7, 0, VXC_RM_ToNearestEven, 1), uniVertSec7Part1_8x_4x4); \
    \
    _viv_asm(COPY, dst2, dst0, 16); \
    VXC_WriteImage2DArray(output, coord_out, dst2, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0)); \
}

TENSORSCALE_BILINEAR_8X(Fp16,  Fp16,  vxc_short8, vxc_half8,  vxc_half8,  vxc_short8)
    //TENSORSCALE_BILINEAR_8X(Int16, Int16, vxc_short8, vxc_short8, vxc_short8, vxc_short8)



_viv_uniform VXC_512Bits uniConvertDFP2FP32_4x4;
_viv_uniform float dfpScale;
__kernel void vxcTensorScale_Bilinear_dfp8
    (
    image2d_array_t input,
    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;

    float4 left_x_f    = floor(in_x);
    float4 x_lerp      = in_x - left_x_f;
    int4   left_x_idx  = convert_int4(left_x_f);
    float4 right_x_f   = ceil(in_x);
    int4   right_x_idx = convert_int4(right_x_f);

    float  in_y        = convert_float(coord_out.y) * scale_xy.y;

    float  top_y_f     = floor(in_y);
    float  y_lerp      = in_y - top_y_f;
    int    top_y_idx   = convert_int(top_y_f);
    float  bottom_y_f  = ceil(in_y);
    int    bottom_y_idx= convert_int(bottom_y_f);

    vxc_char16 top_left, top_right;
    vxc_char16 bottom_left, bottom_right;

    int4 coord_in = (int4)(left_x_idx.x, top_y_idx, coord_out.z, 0);

    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.y;
    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.z;
    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.w;
    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    coord_in.x = right_x_idx.x;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.y;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.z;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.w;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    coord_in.y = bottom_y_idx;
    coord_in.x = left_x_idx.x;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.y;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.z;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.w;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    coord_in.x = right_x_idx.x;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.y;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.z;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.w;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    float4 left4;
    float4 right4;
    float4 top4;
    float4 bottom4;

    VXC_DP4x4(left4, top_left, top_left, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);
    VXC_DP4x4(right4, top_right, top_right, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);

    right4      -= left4;
    top4        = right4 * x_lerp + left4;

    VXC_DP4x4(left4, bottom_left, bottom_left, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);
    VXC_DP4x4(right4, bottom_right, bottom_right, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);

    right4      -= left4;
    bottom4      = right4 * x_lerp + left4;

    bottom4     -= top4;
    float4 dst4  = bottom4 * y_lerp + top4;

    dst4         = dst4 * dfpScale;

    int4 dst     = convert_int4_rte(dst4);

    VXC_DP2x8(top_left, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
    VXC_WriteImage2DArray(output, coord_out, top_left, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
}

__kernel void vxcTensorScale_Bilinear_dfp16
    (
    image2d_array_t input,
    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;

    float4 left_x_f    = floor(in_x);
    float4 x_lerp      = in_x - left_x_f;
    int4   left_x_idx  = convert_int4(left_x_f);
    float4 right_x_f   = ceil(in_x);
    int4   right_x_idx = convert_int4(right_x_f);

    float  in_y        = convert_float(coord_out.y) * scale_xy.y;

    float  top_y_f     = floor(in_y);
    float  y_lerp      = in_y - top_y_f;
    int    top_y_idx   = convert_int(top_y_f);
    float  bottom_y_f  = ceil(in_y);
    int    bottom_y_idx= convert_int(bottom_y_f);

    vxc_short8 top_left, top_right;
    vxc_short8 bottom_left, bottom_right;

    int4 coord_in = (int4)(left_x_idx.x, top_y_idx, coord_out.z, 0);

    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.y;
    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.z;
    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.w;
    VXC_ReadImage2DArray(top_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    coord_in.x = right_x_idx.x;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.y;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.z;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.w;
    VXC_ReadImage2DArray(top_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    coord_in.y = bottom_y_idx;
    coord_in.x = left_x_idx.x;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.y;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.z;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = left_x_idx.w;
    VXC_ReadImage2DArray(bottom_left, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    coord_in.x = right_x_idx.x;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.y;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.z;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));
    coord_in.x = right_x_idx.w;
    VXC_ReadImage2DArray(bottom_right, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));

    float4 left4;
    float4 right4;
    float4 top4;
    float4 bottom4;

    VXC_DP4x4(left4, top_left, top_left, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);
    VXC_DP4x4(right4, top_right, top_right, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);

    right4      -= left4;
    top4        = right4 * x_lerp + left4;

    VXC_DP4x4(left4, bottom_left, bottom_left, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);
    VXC_DP4x4(right4, bottom_right, bottom_right, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);

    right4      -= left4;
    bottom4      = right4 * x_lerp + left4;

    bottom4     -= top4;
    float4 dst4  = bottom4 * y_lerp + top4;

    dst4         = dst4 * dfpScale;

    int4 dst     = convert_int4_rte(dst4);

    VXC_DP2x8(top_left, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
    VXC_WriteImage2DArray(output, coord_out, top_left, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));
}
_viv_uniform VXC_512Bits uniConvertI32toI16_2x8;
_viv_uniform VXC_512Bits uniGetMaskShift_2x8;
_viv_uniform VXC_512Bits uniConvertDFP2FP32_part1_4x4;
__kernel void vxcTensorScale_Bilinear_dfp8_upsample
    (
    image2d_array_t input,
    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;

    float4 left_x_f    = floor(in_x);
    float4 x_lerp      = in_x - left_x_f;
    int4   left_x_idx  = convert_int4(left_x_f);
    float4 right_x_f   = ceil(in_x);
    int4   right_x_idx = convert_int4(right_x_f);

    float  in_y        = convert_float(coord_out.y) * scale_xy.y;

    float  top_y_f     = floor(in_y);
    float  y_lerp      = in_y - top_y_f;
    int    top_y_idx   = convert_int(top_y_f);
    float  bottom_y_f  = ceil(in_y);
    int    bottom_y_idx= convert_int(bottom_y_f);

    vxc_uchar16 src0, src1, dst0, dst1;

    vxc_char16 top;
    vxc_char16 bottom;

    int4 coord_in = (int4)(left_x_idx.x, top_y_idx, coord_out.z, 0);

    VXC_ReadImage2DArray(src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord_in.y = bottom_y_idx;
    VXC_ReadImage2DArray(src1, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    vxc_ushort8 bitextract_p0;
    vxc_uchar16 maskShift = {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8};
    VXC_DP2x8(bitextract_p0, left_x_idx, right_x_idx, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvertI32toI16_2x8);
    vxc_ushort8 constData = 8;
    VXC_DP2x8(maskShift, bitextract_p0, constData, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniGetMaskShift_2x8);

    do
    {
        VXC_BitExtract(dst0, src0, src0, maskShift, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_BitExtract(dst1, src1, src1, maskShift, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        _viv_asm(COPY, top, dst0, 16);
        _viv_asm(COPY, bottom, dst1, 16);

        coord_in.z ++;
        coord_in.y = top_y_idx;
        VXC_ReadImage2DArray(src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
        coord_in.y = bottom_y_idx;
        VXC_ReadImage2DArray(src1, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

        float4 left4;
        float4 right4;
        float4 top4;
        float4 bottom4;

        VXC_DP4x4(left4, top, top, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);
        VXC_DP4x4(right4, top, top, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_part1_4x4);

        top4        = right4 * x_lerp + left4;

        VXC_DP4x4(left4, bottom, bottom, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);
        VXC_DP4x4(right4, bottom, bottom, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_part1_4x4);

        bottom4      = right4 * x_lerp + left4;
        bottom4     -= top4;
        float4 dst4  = bottom4 * y_lerp + top4;
        dst4         = dst4 * dfpScale;
        int4 dst     = convert_int4_rte(dst4);
        VXC_DP2x8(top, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
        VXC_WriteImage2DArray(output, coord_out, top, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));

        coord_out.z ++;
    } while (coord_in.z < depth);
}

_viv_uniform VXC_512Bits uniU8SubZPtoFp32_part1_4x4;
__kernel void vxcTensorScale_Bilinear_u8_upsample
    (
    image2d_array_t input,
    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;

    float4 left_x_f    = floor(in_x);
    float4 x_lerp      = in_x - left_x_f;
    int4   left_x_idx  = convert_int4(left_x_f);
    float4 right_x_f   = ceil(in_x);
    int4   right_x_idx = convert_int4(right_x_f);

    float  in_y        = convert_float(coord_out.y) * scale_xy.y;

    float  top_y_f     = floor(in_y);
    float  y_lerp      = in_y - top_y_f;
    int    top_y_idx   = convert_int(top_y_f);
    float  bottom_y_f  = ceil(in_y);
    int    bottom_y_idx= convert_int(bottom_y_f);

    vxc_uchar16 src0, src1;

    vxc_uchar16 top;
    vxc_uchar16 bottom;

    int4 coord_in = (int4)(left_x_idx.x, top_y_idx, coord_out.z, 0);

    VXC_ReadImage2DArray(src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    coord_in.y = bottom_y_idx;
    VXC_ReadImage2DArray(src1, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    vxc_ushort8 bitextract_p0;
    vxc_uchar16 maskShift = {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8};
    VXC_DP2x8(bitextract_p0, left_x_idx, right_x_idx, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvertI32toI16_2x8);
    vxc_ushort8 constData = 8;
    VXC_DP2x8(maskShift, bitextract_p0, constData, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniGetMaskShift_2x8);

    do
    {
        VXC_BitExtract(top, src0, src0, maskShift, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_BitExtract(bottom, src1, src1, maskShift, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

        coord_in.z ++;
        coord_in.y = top_y_idx;
        VXC_ReadImage2DArray(src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
        coord_in.y = bottom_y_idx;
        VXC_ReadImage2DArray(src1, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

        float4 left4;
        float4 right4;
        float4 top4;
        float4 bottom4;

        unsigned char inputZP;
        _viv_asm(COPY, inputZP, input_ZP, 4);
        VXC_DP4x4(left4, top, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZPtoFp32_4x4);
        VXC_DP4x4(right4, top, top, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZPtoFp32_part1_4x4);

        top4        = right4 * x_lerp + left4;

        VXC_DP4x4(left4, bottom, inputZP, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZPtoFp32_4x4);
        VXC_DP4x4(right4, bottom, bottom, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniU8SubZPtoFp32_part1_4x4);

        bottom4      = right4 * x_lerp + left4;
        bottom4     -= top4;
        float4 dst4  = bottom4 * y_lerp + top4;
        dst4         = dst4 * uint8Scale + output_ZP;
        int4 dst     = convert_int4_rte(dst4);
        VXC_DP2x8(top, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
        VXC_WriteImage2DArray(output, coord_out, top, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));

        coord_out.z ++;
    } while (coord_in.z < depth);
}

_viv_uniform VXC_512Bits uniFp16toFp32_part1_4x4;
__kernel void vxcTensorScale_Bilinear_fp16_upsample
    (
    image2d_array_t input,
    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;

    float4 left_x_f    = floor(in_x);
    float4 x_lerp      = in_x - left_x_f;
    int4   left_x_idx  = convert_int4(left_x_f);
    float4 right_x_f   = ceil(in_x);
    int4   right_x_idx = convert_int4(right_x_f);

    float  in_y        = convert_float(coord_out.y) * scale_xy.y;

    float  top_y_f     = floor(in_y);
    float  y_lerp      = in_y - top_y_f;
    int    top_y_idx   = convert_int(top_y_f);
    float  bottom_y_f  = ceil(in_y);
    int    bottom_y_idx= convert_int(bottom_y_f);

    vxc_ushort8 src0, src1, src2, src3, dst0, dst1;

    vxc_half8 top;
    vxc_half8 bottom;

    int4 coord_in = (int4)(left_x_idx.x, top_y_idx, coord_out.z, 0);

    VXC_ReadImage2DArray(src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src1, input, coord_in, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    coord_in.y = bottom_y_idx;
    VXC_ReadImage2DArray(src2, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src3, input, coord_in, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    vxc_ushort8 bitextract_p0;
    vxc_uchar16 maskShift = {16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16};
    VXC_DP2x8(bitextract_p0, left_x_idx, right_x_idx, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvertI32toI16_2x8);
    vxc_ushort8 constData = 16;
    VXC_DP2x8(maskShift, bitextract_p0, constData, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniGetMaskShift_2x8);

    do
    {
        VXC_BitExtract(dst0, src0, src1, maskShift, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_BitExtract(dst1, src2, src3, maskShift, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        _viv_asm(COPY, top, dst0, 16);
        _viv_asm(COPY, bottom, dst1, 16);

        coord_in.z ++;
        coord_in.y = top_y_idx;
        VXC_ReadImage2DArray(src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(src1, input, coord_in, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

        coord_in.y = bottom_y_idx;
        VXC_ReadImage2DArray(src2, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(src3, input, coord_in, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

        float4 left4;
        float4 right4;
        float4 top4;
        float4 bottom4;

        VXC_DP4x4(left4, top, top, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
        VXC_DP4x4(right4, top, top, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_part1_4x4);
        top4        = right4 * x_lerp + left4;

        VXC_DP4x4(left4, bottom, bottom, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_4x4);
        VXC_DP4x4(right4, bottom, bottom, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32_part1_4x4);
        bottom4      = right4 * x_lerp + left4;
        bottom4     -= top4;
        float4 dst4  = bottom4 * y_lerp + top4;

        half4 tmp;
        _viv_asm(CONV, tmp, dst4);
        VXC_DP2x8(top, tmp, tmp, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniExtactHalf8_2x8);
        _viv_asm(COPY, dst0, top, 16);

        VXC_WriteImage2DArray(output, coord_out, dst0, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));

        coord_out.z ++;
    } while (coord_in.z < depth);
}

__kernel void vxcTensorScale_Bilinear_dfp16_upsample
    (
    image2d_array_t input,
    image2d_array_t output
    )
{
    int4 coord_out  =  (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    int4   coord_x     = coord_out.xxxx + (int4)(0, 1, 2, 3);
    float4 in_x        = convert_float4(coord_x) * scale_xy.xxxx;

    float4 left_x_f    = floor(in_x);
    float4 x_lerp      = in_x - left_x_f;
    int4   left_x_idx  = convert_int4(left_x_f);
    float4 right_x_f   = ceil(in_x);
    int4   right_x_idx = convert_int4(right_x_f);

    float  in_y        = convert_float(coord_out.y) * scale_xy.y;

    float  top_y_f     = floor(in_y);
    float  y_lerp      = in_y - top_y_f;
    int    top_y_idx   = convert_int(top_y_f);
    float  bottom_y_f  = ceil(in_y);
    int    bottom_y_idx= convert_int(bottom_y_f);

    vxc_ushort8 src0, src1, src2, src3, dst0, dst1;

    vxc_short8 top;
    vxc_short8 bottom;

    int4 coord_in = (int4)(left_x_idx.x, top_y_idx, coord_out.z, 0);

    VXC_ReadImage2DArray(src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src1, input, coord_in, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    coord_in.y = bottom_y_idx;
    VXC_ReadImage2DArray(src2, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src3, input, coord_in, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    vxc_ushort8 bitextract_p0;
    vxc_uchar16 maskShift = {16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16};
    VXC_DP2x8(bitextract_p0, left_x_idx, right_x_idx, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniConvertI32toI16_2x8);
    vxc_ushort8 constData = 16;
    VXC_DP2x8(maskShift, bitextract_p0, constData, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniGetMaskShift_2x8);

    do
    {
        VXC_BitExtract(dst0, src0, src1, maskShift, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_BitExtract(dst1, src2, src3, maskShift, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        _viv_asm(COPY, top, dst0, 16);
        _viv_asm(COPY, bottom, dst1, 16);

        float4 left4;
        float4 right4;
        float4 top4;
        float4 bottom4;

        coord_in.z ++;
        coord_in.y = top_y_idx;
        VXC_ReadImage2DArray(src0, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(src1, input, coord_in, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

        coord_in.y = bottom_y_idx;
        VXC_ReadImage2DArray(src2, input, coord_in, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage2DArray(src3, input, coord_in, VXC_5BITOFFSET_XY(8, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

        VXC_DP4x4(left4, top, top, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);
        VXC_DP4x4(right4, top, top, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_part1_4x4);
        top4        = right4 * x_lerp + left4;

        VXC_DP4x4(left4, bottom, bottom, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_4x4);
        VXC_DP4x4(right4, bottom, bottom, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniConvertDFP2FP32_part1_4x4);
        bottom4      = right4 * x_lerp + left4;
        bottom4     -= top4;
        float4 dst4  = bottom4 * y_lerp + top4;
        dst4         = dst4 * dfpScale;
        int4 dst     = convert_int4_rte(dst4);

        VXC_DP2x8(top, dst, dst, VXC_MODIFIER(0, 3, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
        VXC_WriteImage2DArray(output, coord_out, top, VXC_MODIFIER(0, 3, 0,VXC_RM_TowardZero, 0));

        coord_out.z ++;
    } while (coord_in.z < depth);
}
